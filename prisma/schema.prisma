// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @map("_id")
  name          String
  email         String    @unique
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  emailVerified Boolean
  
  sessions      Session[]
  accounts      Account[]
  tasks         Task[]
  comments      Comment[]
  
  @@map("user")
}

model Session {
  id        String   @id @map("_id")
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id @map("_id")
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Task {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  status      String
  createdAt   DateTime  @default(now())
  
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  comments    Comment[]
  logs        Log[]
}


model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  text      String
  createdAt DateTime
  
  taskId    String   @db.ObjectId
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  

  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Log {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  oldStatus     String
  newStatus     String
  date          DateTime
  taskId        String   @db.ObjectId
  task          Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
}


